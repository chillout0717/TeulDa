<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="PhotoMapper">


	<resultMap id="photoSelectMap" type="com.teulda.common.Photo">
		<result property="photoNo"				column="photo_id"				jdbcType="NUMERIC" />
		<result property="photoGroupNo"			column="photo_group_id"			jdbcType="NUMERIC" />
		<result property="postNo"				column="postId"					jdbcType="NUMERIC" />
		<result property="diaryNo"				column="diary_id"				jdbcType="NUMERIC" />
		<result property="photoName"			column="photo_name"				jdbcType="VARCHAR" />
		<result property="photoAddr"			column="photo_addr"				jdbcType="VARCHAR" />
		<result property="latitude"				column="latitude"				jdbcType="NUMERIC" />
		<result property="longitude"			column="longitude"				jdbcType="NUMERIC" />
		<result property="photoDate"			column="photo_date"				jdbcType="DATE" />
		<result property="deleteDate"			column="delete_date"			jdbcType="DATE" />
		<result property="description"			column="description"			jdbcType="VARCHAR" />
		<result property="diaryPhotoType"		column="diary_photo_type"		jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="groupSelectMap" type="com.teulda.common.Group">
		<result property="groupNo"		column="group_id"		jdbcType="NUMERIC"/>
		<result	property="groupName"	column="group_name"		jdbcType="VARCHAR"/>
		<result	property="nickname"		column="nickname"		jdbcType="VARCHAR"/>
		<result	property="deleteDate"	column="delete_date"	jdbcType="DATE"/>
		<result	property="groupType"	column="group_type"		jdbcType="VARCHAR"/>
	</resultMap>
	 
	
	<!-- SQL : INSERT PHOTO 사진등록 -->
	<insert id="addPhoto"	parameterType="com.teulda.common.Photo">
		INSERT 
		INTO photo ( photo_id, photo_group_id, photo_name, photo_addr, 
					 latitude, longitude, photo_date, delete_date )
		VALUES ( seq_photo_photo_id.nextval, 
		(select group_id 
		from groups
		where nickname='${nickname}' and group_name = 'default1'),
		${photoName}, ${photoAddr}, ${latitude : NUMERIC}, ${longitude : NUMERIC}, null, null)
	</insert>
	
	<!-- SQL : INSERT PHOTO 앨범등록 -->
	<insert id="addGroup"	parameterType="com.teulda.common.Group">
		INSERT 
		INTO groups ( group_id, group_name, nickname, delete_date, group_type)
		VALUES ( seq_groups_group_id.nextval, '${groupName}', '${nickname}', null, '1')
	</insert>
	
	
	
	<!-- SQL : SELECT ONE (실질적으로 사용은 안할 듯) -->
	<select id="getPhoto" parameterType="int" resultMap="photoSelectMap">
		SELECT
		photo_id, photo_group_id, post_id, diary_id, photo_name, photo_addr, 
		latitude, longitude, photo_date, delete_date, description, diary_photo_type
		FROM photo
		WHERE photo_id = #{value}
	</select>
	
	<!-- SQL : SELECT ONE (실질적으로 사용은 안할 듯) -->
	<select id="getGroup" parameterType="int" resultMap="groupSelectMap">
		SELECT
		group_id, group_name, nickname, delete_date, group_type
		FROM groups
		WHERE group_id = #{value} AND group_type = 1
	</select>
	
	
	
	<!-- SQL : UPDATE GroupName 앨범명 수정 -->
	<update id="updateGroupName" parameterType="com.teulda.common.Group">
		UPDATE groups
		<set>
			group_name = #{groupName}
		</set>
		WHERE group_id = #{groupNo}
	</update>
	
	<!-- SQL : UPDATE GroupId 사진앨범 변경 -->
	<update id="updateGroupNo" parameterType="com.teulda.common.Photo">
		UPDATE photo
		<set>
			photo_group_id = #{photoGroupNo}
		</set>
		WHERE photo_id = #{photoNo}
	</update>
	
	<!-- SQL : UDPATE PhotoStatus(단일 사진) 삭제, 복구 -->
	<update id="updatePhotoStatus" parameterType="com.teulda.common.Photo">
		UPDATE photo
		<set>
			<choose>
				<when test="deleteDate != null">
					delete_date = null
				</when>
				<otherwise>
					delete_date = sysdate
				</otherwise>
			</choose>
		</set>
		WHERE photo_id = #{photoNo}
	</update>
	
	<!-- SQL : UPDATE GroupStatus(단일 앨범) 삭제, 복구 -->
	<update id="updateGroupStatus" parameterType="com.teulda.common.Group">
		UPDATE groups
		<set>
			<choose>
				<when test="deleteDate != null">
					delete_date = null
				</when>
				<otherwise>
					delete_date = sysdate
				</otherwise>
			</choose>
		</set>
		WHERE group_id = #{groupNo} AND group_type = 1
	</update>
	
	<!-- SQL : UPDATE GroupPhotoStatus(앨범 안에 있는 사진) 삭제, 복구 -->
	<update id="updateGroupPhotoStatus" parameterType="com.teulda.common.Group">
		UPDATE photo
		<set>
			<choose>
				<when test="deleteDate != null">
					delete_date = null
				</when>
				<otherwise>
					delete_date = sysdate
				</otherwise>
			</choose>
		</set>
		WHERE photo_id IN
		(SELECT 
		p.photo_id
		FROM photo p, groups g
		WHERE g.group_id = p.photo_group_id AND p.photo_group_id = #{groupNo} AND g.group_type = 1)
	</update>


	<!-- SQL : DELETE Photo 완전삭제(휴지통) -->
	<!-- delete_date가 null이 아닌 나의 모든 사진과 앨범, 앨범에 들어있는 사진들 삭제 -->
	<delete id="deletePhoto" parameterType="String">
		DELETE
		FROM photo
		WHERE delete_date IS NOT NULL AND photo_group_id IN 
		(SELECT group_id
		FROM groups
		WHERE nickname = #{value} AND delete_date IS NOT NULL AND group_type = 1)
		AND photo_group_id IS NOT NULL
	</delete>
	
	<!-- SQL : DELETE Group 완전삭제(휴지통) -->
	<delete id="deleteGroup" parameterType="String">
		DELETE
		FROM groups
		WHERE delete_date IS NOT NULL AND group_type = 1 AND nickname = #{value}
	</delete>
	
	
	
	<!-- SQL : SELECT PhotoTotalCount(사진갯수, 삭제처리한 사진갯수) -->
	<select id="getPhotoTotalCount" parameterType="com.teulda.common.Group" resultType="int">
		SELECT
		count(*)
		FROM photo
		WHERE photo_group_id IN 
		(SELECT
		g.group_id
		FROM groups g, photo p
		WHERE g.group_id = p.photo_group_id AND g.nickname = #{nickname} AND g.group_id = #{groupNo} AND g.group_type = '1') AND delete_date IS NULL
	</select>
	
	<!-- SQL : SELECT PhotoList(앨범에 맞는 사진조회, 삭제처리한 사진list 조회) -->
	<select id="getPhotoList" parameterType="com.teulda.common.Group" resultMap="photoSelectMap">
		SELECT
		photo_id, photo_group_id, photo_name, photo_addr, latitude, longitude, photo_date, delete_date
		FROM photo
		WHERE photo_group_id IN 
		(SELECT
		g.group_id
		FROM groups g, photo p
		WHERE g.group_id = p.photo_group_id AND g.nickname = #{nickname} AND g.group_id = #{groupNo} AND g.group_type = '1') AND delete_date IS NULL
	</select>
	
	<!-- SQL : SELECT GroupTotalCount(앨범갯수, 삭제처리한 앨범갯수) -->
	<select id="getGroupTotalCount" parameterType="com.teulda.common.Group" resultType="int">
		SELECT
		count(*)
		FROM groups
		WHERE nickname = #{nickname} AND group_type = '1' AND delete_date IS NULL
	</select>
	
	<!-- SQL : SELECT GroupList(내 사진앨범 조회, 삭제처리한 앨범list 조회) -->
	<select id="getGroupList" parameterType="com.teulda.common.Group" resultMap="groupSelectMap">
		SELECT
		group_id, group_name, nickname, delete_date, group_type
		FROM groups
		WHERE nickname = #{nickname} AND group_type = '1' AND delete_date IS NULL
	</select>
	
	<!-- SQL : SELECT PhotoList(앨범에 맞는 사진조회, 삭제처리한 사진list 조회) -->
	<select id="deletePhotoList" parameterType="com.teulda.common.Group" resultMap="photoSelectMap">
		SELECT
		photo_id, photo_group_id, photo_name, photo_addr, latitude, longitude, photo_date, delete_date
		FROM photo
		WHERE photo_group_id IS NOT NULL AND delete_date IS NOT NULL
	</select>
	
		<!-- SQL : SELECT GroupList(내 사진앨범 조회, 삭제처리한 앨범list 조회) -->
	<select id="deleteGroupList" parameterType="com.teulda.common.Group" resultMap="groupSelectMap">
		SELECT
		group_id, group_name, nickname, delete_date, group_type
		FROM groups
		WHERE nickname = #{nickname} AND group_type = '1' AND delete_date IS NOT NULL
	</select>

	<!-- SQL : SELECT Purchase LIST -->
	<!-- <select	id="getPurchaseList"	parameterType="map"	resultMap="purchaseSelectMap">
		SELECT *
		FROM (SELECT inner_table.*, ROWNUM AS row_seq
	  			FROM	(SELECT tran_no, buyer_id, user_name, cell_phone, tran_status_code 
		  					FROM transaction, users 
							WHERE user_id = buyer_id 
							AND buyer_id = #{buyerId}
							ORDER BY tran_no DESC) inner_table	
				WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	</select> -->

	<!-- SQL : SELECT Sale LIST -->
	<!-- <select	id="getSaleList"	parameterType="com.model2.mvc.common.Search"	resultMap="purchaseSelectMap">
		SELECT *
		FROM	(SELECT inner_table.*, ROWNUM AS row_seq
	  				FROM(SELECT	p.prod_no, prod_name, prod_detail, manufacture_day, 
						price, image_file, reg_date, tran_no, tran_status_code 
						FROM product p, transaction t
						<where>
						p.prod_no = t.prod_no
						<if test="searchCondition != null">
							<choose>
								<when test="searchCondition == 0 and searchKeyword !='' ">
									AND p.prod_no LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 1 and searchKeyword !='' ">
					 				AND LOWER(p.prod_name) LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 2 and searchKeyword !='' ">
					 				AND p.price LIKE '%'||#{searchKeyword}||'%'
								</when>
							</choose>
						</if>
						</where>
						ORDER BY tran_no DESC) inner_table
				WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	</select> -->
	
	<!-- SQL : SELECT PURCHASE ROW Count -->
	<!-- <select	id="getPurchaseTotalCount"	parameterType="map"	resultType="int">
	  	SELECT COUNT(*)
	  	FROM	(SELECT tran_no, buyer_id, user_name, cell_phone, tran_status_code 
						FROM transaction, users 
						<where>
						user_id = buyer_id 
						AND buyer_id = #{buyerId}
						<if test="searchCondition != null">
							<choose>
								<when test="searchCondition == 0 and searchKeyword !='' ">
									AND prod_no LIKE '%'||#{search.searchKeyword}||'%'
								</when>
								<when test="searchCondition == 1 and searchKeyword !='' ">
					 				AND prod_name LIKE '%'||#{search.searchKeyword}||'%'
								</when>
								<when test="searchCondition == 2 and searchKeyword !='' ">
					 				AND price LIKE '%'||#{search.searchKeyword}||'%'
								</when>
							</choose>
						</if>
						</where>
						) countTable						
	</select> -->

	<!-- SQL : SELECT SALE ROW Count -->
	<!-- <select	id="getSaleTotalCount"	parameterType="com.model2.mvc.common.Search"	resultType="int">
	  	SELECT COUNT(*)
	  	FROM	(SELECT	p.prod_no, prod_name, prod_detail, manufacture_day, 
						price, image_file, reg_date, tran_no, tran_status_code 
						FROM product p, transaction t
						<where>
						p.prod_no = t.prod_no
						<if test="searchCondition != null">
							<choose>
								<when test="searchCondition == 0 and searchKeyword !='' ">
									AND p.prod_no LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 1 and searchKeyword !='' ">
					 				AND LOWER(p.prod_name) LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 2 and searchKeyword !='' ">
					 				AND p.price LIKE '%'||#{searchKeyword}||'%'
								</when>
							</choose>
						</if>
						</where>
						) countTable						
	</select> -->

</mapper>