<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DiaryMapper">

	<resultMap id="diarySelectMap" type="com.teulda.service.domain.Diary">
		<result property="diaryNo"				column="diary_id"			jdbcType="NUMERIC" />
		<result property="title"				column="title"				jdbcType="VARCHAR" />
		<result property="location"				column="diary_addr"			jdbcType="VARCHAR" />
		<result property="latitude"				column="latitude"			jdbcType="NUMERIC" />
		<result property="longitude"			column="longitude"			jdbcType="NUMERIC" />
		<result property="writeDate"			column="diary_date"			jdbcType="DATE" />
		<result property="updateDate"			column="last_update_date"	jdbcType="DATE" />
		<result property="nickname"				column="origin_nick"		jdbcType="VARCHAR" />
		<result property="startDate"			column="start_date"			jdbcType="DATE" />
		<result property="endDate"				column="end_date"			jdbcType="DATE" />
		<result property="content"				column="content"			jdbcType="LONGVARCHAR" />
		<result property="thumbnail"			column="thumbnail"			jdbcType="VARCHAR" />
		<result property="viewCount"			column="view_count"			jdbcType="NUMERIC" />
		<result property="scrapCount"			column="scrap_count"		jdbcType="NUMERIC" />
		<result property="deleteDate"			column="delete_date"		jdbcType="DATE" />
		<result property="scrapNickname"		column="scrap_nick"			jdbcType="VARCHAR" />
		<result property="scrapDate"			column="scrap_date"			jdbcType="DATE" />
		<result property="groupNo"				column="group_id"			jdbcType="NUMERIC" />
		<result property="currency"				column="currency"			jdbcType="VARCHAR" />
		<result property="transBill"			column="trans_bill"			jdbcType="NUMERIC" />
		<result property="roomBill"				column="room_bill"			jdbcType="NUMERIC" />
		<result property="foodBill"				column="food_bill"			jdbcType="NUMERIC" />
		<result property="tourBill"				column="tour_bill"			jdbcType="NUMERIC" />
		<result property="shopBill"				column="shop_bill"			jdbcType="NUMERIC" />
		<result property="isPublic"				column="is_public"			jdbcType="CHAR" />
	</resultMap>
	
	<resultMap id="hashTagSelectMap" type="com.teulda.service.domain.HashTag">
		<result property="hashTagNo"			column="hashtag_id"			jdbcType="NUMERIC" />
		<result property="diaryNo"				column="diary_id"			jdbcType="NUMERIC" />
		<result property="hashTagName"			column="hashtag_name"		jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="photoSelectMap" type="com.teulda.common.Photo">
		<result property="photoNo"				column="photo_id"			jdbcType="NUMERIC" />
		<result property="diaryNo"				column="diary_id"			jdbcType="NUMERIC" />
		<result property="photoName"			column="photo_name"			jdbcType="VARCHAR" />
		<result property="description"			column="description"		jdbcType="VARCHAR" />
		<result property="diaryPhotoType"		column="diary_photo_type"	jdbcType="CHAR" />
	</resultMap>
	
	<resultMap id="groupSelectMap" type="com.teulda.common.Group">
		<result property="groupNo"		column="group_id"		jdbcType="NUMERIC"/>
		<result	property="groupName"	column="group_name"		jdbcType="VARCHAR"/>
		<result	property="nickname"		column="nickname"		jdbcType="VARCHAR"/>
		<result	property="groupType"	column="group_type"		jdbcType="VARCHAR"/>
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addDiary"		parameterType="diary">
	INSERT 
	INTO DIARY (diary_id, title, diary_addr, latitude, longitude, diary_date, 
				origin_nick, start_date, end_date, 
            	content, thumbnail, group_id,
            	currency, trans_bill, room_bill, 
            	food_bill, tour_bill, shop_bill, is_public)
            	
	VALUES 	(seq_diary_diary_id.nextval, #{title}, #{location}, #{latitude}, #{longitude}, SYSDATE, 
			#{nickname}, #{startDate}, #{endDate}, 
        	#{content:LONGVARCHAR}, #{thumbnail:VARCHAR},  (select group_id
                            								from groups	
                            								where nickname = #{nickname} and group_name = 'default2'),
        	#{currency:VARCHAR}, #{transBill:NUMERIC}, #{roomBill:NUMERIC}, 
        	#{foodBill:NUMERIC}, #{tourBill:NUMERIC}, #{shopBill:NUMERIC}, #{isPublic})
	</insert>
	
	<!-- SQL : INSERT -->
	<insert 	id="addHashTag"		parameterType="hashTag">
	INSERT
	INTO HASHTAG (hashtag_id, diary_id, hashtag_name)
	VALUES (seq_hashtag_hashtag_id.nextval, 
				<if test="diaryNo == 0">
            	(SELECT diary_id 
            	FROM
            	(SELECT * 
            	FROM diary 
            	where origin_nick = #{nickname}
            	ORDER BY diary_id DESC)
            	WHERE ROWNUM = 1),
            	</if>
            	<if test="diaryNo != 0">
            	#{diaryNo},
            	</if>
        	#{hashTagName})
	</insert>
	
	<!-- SQL : INSERT --> <!-- 추후 수정 -->
	<insert 	id="addPhoto"		parameterType="photo">
	INSERT
	INTO PHOTO (photo_id, diary_id, 
            	photo_name, description, diary_photo_type)
	VALUES (seq_photo_photo_id.nextval, <if test="diaryNo == 0">
										(SELECT diary_id 
                                    	FROM
                                    	(SELECT * 
                                    	FROM diary 
                                    	where origin_nick = #{nickname}
                                    	ORDER BY diary_id DESC)
                                   		WHERE ROWNUM = 1),
                                   		</if>
                                   		<if test="diaryNo != 0">
                                   		#{diaryNo},
            							</if>
        	#{photoName}, #{description:VARCHAR}, #{diaryPhotoType})
	</insert>
	
	<!-- SQL : INSERT -->
	<insert 	id="addDiaryGroup"		parameterType="group">
	INSERT 
	INTO groups (group_id, group_name, nickname, group_type)
	VALUES (seq_groups_group_id.nextval, #{groupName}, #{nickname}, '2')
	</insert>
	
	<!-- SQL : SELECT ONE -->
	<select 	id="getDiary"	parameterType="int"	resultMap="diarySelectMap">
	SELECT * 
	FROM DIARY
	WHERE diary_id = #{diaryNo}
	</select>
	
	<!-- SQL : SELECT ONE -->
	<select 	id="getBookmarkCount"	parameterType="int"	resultType="int">
	SELECT COUNT(*)
	FROM (SELECT * 
     	  FROM BOOKMARK
      	  WHERE diary_id = #{diaryNo})
	</select>
	
	<!-- SQL : SELECT LIST -->
	<select  id="getHashTagList"  parameterType="int"	resultMap="hashTagSelectMap">
	SELECT hashtag_id, diary_id, hashtag_name
	FROM HASHTAG
	WHERE diary_id = #{diaryNo}
	</select> 
	
	<!-- SQL : SELECT LIST -->
	<select  id="getPhotoList"  parameterType="int"	resultMap="photoSelectMap">
	SELECT * 
	FROM PHOTO
	WHERE diary_id = #{diaryNo}
	</select> 
	
	<!-- SQL : SELECT LIST -->
	<select  id="getDiaryGroupList"  parameterType="String"	resultMap="groupSelectMap">
	SELECT group_id, group_name
	FROM groups
	WHERE nickname = #{nickname} and group_type = 2 
	</select> 
	
	<!-- SQL : SELECT LIST --> <!-- 추후 Search 조건 추가하기 -->
	<select  id="getMyDiaryList"  parameterType="map"	resultMap="diarySelectMap">
	SELECT * 
	FROM 	(select inner_table.*, rownum as row_seq
        	from    (SELECT  diary_id, title, diary_addr, latitude, longitude, 
                	diary_date, start_date, end_date,
               		content, delete_date, thumbnail, group_id
                	FROM diary
                	<where>
               		origin_nick = #{nickname}
               			<if test="isDelete == 'f'">
               			and delete_date is null
               			</if>
               			<if test="isDelete == 't'">
               			and delete_date is not null
               			</if>
               		</where>
               		<!-- 추후 정렬 조건 추가하기 -->
               		) inner_table
      		WHERE ROWNUM &lt; = #{search.endRowNum} )
	WHERE row_seq between #{search.startRowNum} and #{search.endRowNum}
	</select> 
	
	<!-- SQL : SELECT ROW Count -->	 
	<select  id="getMyDiaryCount"  parameterType="map"	 resultType="int">
	SELECT COUNT(*)
	FROM    (SELECT  diary_id, title, diary_addr, latitude, longitude, 
                	 diary_date, start_date, end_date,
                	 content, delete_date, thumbnail, group_id
        	FROM diary
            <where>
            origin_nick = #{nickname}
               	<if test="isDelete == 'f'">
               	and delete_date is null
               	</if>
               	<if test="isDelete == 't'">
               	and delete_date is not null
               	</if>
            </where>
            <!-- 추후 정렬 조건 추가하기 -->
       		) countTable
	</select>
	
	<!-- SQL : SELECT LIST --> <!-- 추후 Search 조건 추가하기 -->
	<!-- 통합검색에서 보이는 기록 리스트는 공개 기록이여야 하며, 삭제일자가 없어야 하며, 스크랩된 기록이 아니여야 한다 -->
	<select  id="getDiaryList"  parameterType="search"	resultMap="diarySelectMap">
	SELECT *
	FROM 	(SELECT inner_table.*, rownum as row_seq
        	 FROM    (SELECT    diary_id, title, diary_addr, diary_date, 
                            	origin_nick, start_date, end_date,
                            	content, thumbnail, view_count
                	 FROM diary
               	 	 WHERE is_public = 't' and delete_date is null and scrap_nick is null
               	 	 <!-- 추후 정렬 조건 추가하기 -->
               	 	 ) inner_table
      		WHERE ROWNUM &lt; = #{endRowNum})
	WHERE row_seq between #{startRowNum} and #{endRowNum}
	</select> 
	
	<!-- SQL : SELECT ROW Count -->	 
	<select  id="getDiaryCount"  parameterType="search"	 resultType="int">
	SELECT COUNT(*)
	FROM (SELECT    diary_id, title, diary_addr, diary_date, 
                	origin_nick, start_date, end_date,
                	content, thumbnail, view_count
      	  FROM diary
      	  WHERE is_public = 't' and delete_date is null and scrap_nick is null 
     	  <!-- 추후 정렬 조건 추가하기 -->
     	  ) countTable 
	</select>
	
	<!-- SQL : UPDATE -->
	<update	id="updateDiary"	parameterType="diary">
	UPDATE diary
	SET title = #{title},
    	diary_addr = #{location},
    	latitude = #{latitude},
    	longitude = #{longitude},
    	last_update_date = SYSDATE, 
    	start_date = #{startDate},
    	end_date = #{endDate},
    	content = #{content:LONGVARCHAR},
    	thumbnail = #{thumbnail:VARCHAR},
    	currency = #{currency:VARCHAR},
    	trans_bill = #{transBill:NUMERIC},
    	room_bill = #{roomBill:NUMERIC},
    	food_bill = #{foodBill:NUMERIC},
    	tour_bill = #{tourBill:NUMERIC},
    	shop_bill = #{shopBill:NUMERIC},
    	is_public = #{isPublic}
	WHERE diary_id = #{diaryNo}
	</update>
	
	<!-- SQL : UPDATE -->
	<update	id="updateDiaryStatus"	parameterType="diary">
	UPDATE diary
	<set>
		<choose>
			<when test="deleteDate != null">
			delete_date = null
			</when>
			<otherwise>
			delete_date = SYSDATE
			</otherwise>
		</choose>
	</set>
	WHERE diary_id = #{diaryNo}
	</update>
	
	<!-- SQL : UPDATE -->
	<update	id="updateDiaryGroup"	parameterType="diary">
	UPDATE diary
	SET group_id = #{groupNo}
	WHERE diary_id = #{diaryNo}
	</update>
	
	<!-- SQL : UPDATE -->
	<update	id="updateDiaryViewCount"	parameterType="int">
	UPDATE diary
	SET view_count = view_count + 1
	WHERE diary_id = #{diaryNo}
	</update>
	
	<!-- SQL : UPDATE -->
	<update	id="updateDiaryScrapCount"	parameterType="int">
	UPDATE diary
	SET scrap_count = scrap_count + 1
	WHERE diary_id = #{diaryNo}
	</update>
	
	<!-- SQL : UPDATE -->
	<update	id="updateUserScrapCount"	parameterType="String">
	UPDATE USERS
	SET scrap_count = scrap_count + 1
	WHERE nickname = #{originNickname}
	</update>
	
	<!-- SQL : DELETE -->
	<delete 	id="deleteDiary"  parameterType="int" >
	DELETE
	FROM diary
	WHERE diary_id = #{diaryNo}
	</delete>
	
	<!-- SQL : DELETE -->
	<delete 	id="deleteHashTagUseDiaryNo"  parameterType="int" >
	DELETE
	FROM hashtag
	WHERE diary_id = #{diaryNo}
	</delete>
	
	<!-- SQL : DELETE -->
	<delete 	id="deletePhotoUseDiaryNo"  parameterType="int" >
	DELETE
	FROM photo
	WHERE diary_id = #{diaryNo}
	</delete>
	
	<!-- SQL : DELETE -->
	<delete 	id="deleteHashTag"  parameterType="int" >
	DELETE
	FROM hashtag
	WHERE hashtag_id = #{hashTagNo} 
	</delete>
	
	<!-- SQL : DELETE -->
	<delete 	id="deletePhoto"  parameterType="int" >
	DELETE
	FROM photo
	WHERE photo_id = #{photoNo}
	</delete>
	
	<!-- SQL : DELETE -->
	<delete 	id="deleteGroup"  parameterType="int" >
	DELETE
	FROM groups
	WHERE group_id = #{groupNo}
	</delete>

</mapper>