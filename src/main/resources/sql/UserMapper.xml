<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">


	<resultMap id="userSelectMap" type="com.teulda.service.domain.User">
		<result property="nickName"					column="nickname"			jdbcType="VARCHAR" />
		<result property="email"		column="email"			jdbcType="VARCHAR" />
		<result property="password"	column="password"			jdbcType="VARCHAR" />
		<result property="name"		column="user_name"				jdbcType="VARCHAR" />
		<result property="phone"		column="phone_number"			jdbcType="VARCHAR" />
		<result property="address"			column="user_addr"			jdbcType="VARCHAR" />
		<result property="likePlace"				column="like_addr"			jdbcType="VARCHAR" />
		<result property="birth"				column="birth"			jdbcType="DATE" />
		<result property="profilePhoto"				column="user_photo"		jdbcType="VARCHAR" />
		<result property="statusDate"			column="update_status_date"		jdbcType="VARCHAR" />
		<result property="isPublic"					column="is_public"			jdbcType="CHAR" />
		<result property="status"				column="status"			jdbcType="CHAR" />
		<result property="role"				column="role"		jdbcType="CHAR" />
	</resultMap>
	
	
	<!-- SQL : INSERT 회원추가-->
	<insert	id="addUser"	parameterType="com.teulda.service.domain.User" >
		INSERT
		INTO users( nickname , email , password , user_name , phone_number, user_addr, like_addr, birth, user_photo, 
		update_status_date, is_public, status, role)
		VALUES	 (	#{nickName} , #{email} , #{password} , #{name}, #{phone:VARCHAR}, #{address:VARCHAR},
							#{likePlace:VARCHAR}, #{birth:VARCHAR}, #{profilePhoto:VARCHAR}, #{statusDate:VARCHAR}, #{isPublic:CHAR} ,'0','0')
	</insert>
	 
	<!-- SQL : SELECT ONE 회원정보상세조회-->
	<select	id="getUser"	 parameterType="com.teulda.service.domain.User"	 resultMap="userSelectMap">
		SELECT *
		FROM users
		WHERE nickname = #{nickName}
	</select>
	
	<!-- SQL : UPDATE 회원정보 업데이트 -->
	<update	id="updateUser"	parameterType="com.teulda.service.domain.User" >
		UPDATE users
	   	<set>
	   		nickname 	= #{nickName:VARCHAR} ,
			email	= #{email:VARCHAR},
			password				= #{password:VARCHAR} ,
			user_name				=	#{name:VARCHAR},
			phone_number				=	#{phone:VARCHAR},
			user_addr				=	#{address:VARCHAR},
			like_addr				=	#{likePlace:VARCHAR},
			birth				=	#{birth:VARCHAR},
			user_photo				=	#{profilePhoto:VARCHAR},
			update_status_date				=	#{statusDate:VARCHAR},
			is_public				=	#{isPublic:CHAR},
			status				=	#{status:CHAR},
			role				=	#{role:CHAR}
	   	</set>
	   	WHERE nickname = #{nickName}
	</update>
	
	<!--  SQL : UPDATE TranCode 
	<update	id="updateStatus"	parameterType="map" >
		UPDATE transaction
	   	<set>
	   		tran_status_code	= #{tranCode}, 
		</set>
		WHERE tran_no = #{tranNo}
	</update> -->
	
	<!-- SQL : REMOVE 회원삭제-->
	<delete id="deleteUser"	parameterType="com.teulda.service.domain.User">
	 	DELETE 
	 	FROM users
	 	WHERE nickname = #{nickName}
	</delete>
	
	<!-- SQL : SELECT User LIST -->
	<select	id="getUserList"	parameterType="map"	resultMap="userSelectMap">
		SELECT *
		FROM (SELECT inner_table.*, ROWNUM AS row_seq
	  			FROM	(SELECT tran_no, buyer_id, user_name, cell_phone, tran_status_code 
		  					FROM transaction, users 
							WHERE user_id = buyer_id 
							AND buyer_id = #{buyerId}
							ORDER BY tran_no DESC) inner_table	
				WHERE ROWNUM &lt;= #{search.endRowNum} )
		WHERE row_seq BETWEEN #{search.startRowNum} AND #{search.endRowNum} 
	</select>

	<!-- SQL : SELECT LIST -->
	<select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT nickname , user_name , email
											FROM users
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 0 and searchKeyword !='' ">
										 				user_id = #{searchKeyword}
													</if>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				user_name = #{searchKeyword}
													</if>
												</where>
											</if>
											ORDER BY user_id ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	 
	 
	 


	
	<!-- SQL : SELECT PURCHASE ROW Count -->
	<select	id="getUserTotalCount"	parameterType="map"	resultType="int">
	  	SELECT COUNT(*)
	  	FROM	(SELECT 
						FROM 
						<where>
						user_id = buyer_id 
						AND buyer_id = #{buyerId}
						<if test="searchCondition != null">
							<choose>
								<when test="searchCondition == 0 and searchKeyword !='' ">
									AND prod_no LIKE '%'||#{search.searchKeyword}||'%'
								</when>
								<when test="searchCondition == 1 and searchKeyword !='' ">
					 				AND prod_name LIKE '%'||#{search.searchKeyword}||'%'
								</when>
								<when test="searchCondition == 2 and searchKeyword !='' ">
					 				AND price LIKE '%'||#{search.searchKeyword}||'%'
								</when>
							</choose>
						</if>
						</where>
						) countTable						
	</select>

	<!-- SQL : SELECT SALE ROW Count -->
	<select	id="getSaleTotalCount"	parameterType="com.teulda.common.Search"	resultType="int">
	  	SELECT COUNT(*)
	  	FROM	(SELECT	p.prod_no, prod_name, prod_detail, manufacture_day, 
						price, image_file, reg_date, tran_no, tran_status_code 
						FROM product p, transaction t
						<where>
						p.prod_no = t.prod_no
						<if test="searchCondition != null">
							<choose>
								<when test="searchCondition == 0 and searchKeyword !='' ">
									AND p.prod_no LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 1 and searchKeyword !='' ">
					 				AND LOWER(p.prod_name) LIKE '%'||#{searchKeyword}||'%'
								</when>
								<when test="searchCondition == 2 and searchKeyword !='' ">
					 				AND p.price LIKE '%'||#{searchKeyword}||'%'
								</when>
							</choose>
						</if>
						</where>
						) countTable						
	</select> 

</mapper>